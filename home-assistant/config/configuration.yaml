
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

discovery:
  ignore:
    - homekit

# Text to speech
tts:
  - platform: google_translate

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

recorder:
  purge_keep_days: 30
  commit_interval: 60

wake_on_lan:

sensor:
  - platform: citybikes
    radius: 1000

  - platform: nordpool
    region: "Oslo"

  - platform: entur_public_transport
    show_on_map: true
    number_of_departures: 3
    stop_ids:
      - 'NSR:StopPlace:58194' # Økern T
      - 'NSR:StopPlace:5914'  # Økern aldershjem
    line_whitelist:
      - 'RUT:Line:5'
      - 'RUT:Line:60'
  
  - platform: statistics
    name: "Apartment Watt average last 5 seconds"
    entity_id: sensor.apartment_watt
    state_characteristic: average_linear
    precision: 0
    max_age:
      seconds: 10

  - platform: command_line
    name: Techem
    command: bash /config/scripts/bash/techem.sh
    scan_interval: 86400

image_processing:
  - platform: doods
    scan_interval: 3
    url: "http://localhost:8080"
    detector: default
    source:
      - entity_id: camera.birds
        name: Birds
    labels:
      - name: bird
        confidence: 35

mqtt:
  sensor:
    - name: "Apartment Watt"
      state_topic: "powermeter"
      unit_of_measurement: "W"
      device_class: power
      value_template: "{{value.split('_')[1] | round }}"

template:      
  - sensor:
      - name: Bird confidence
        unit_of_measurement: "%"
        state: "{{state_attr('image_processing.birds','summary').bird|default(0)}}"

      - name: TV Volume
        unit_of_measurement: "%"
        state: "{{ state_attr('media_player.living_room_tv','volume_level') | multiply(100) | round }}"

      - name: "Precipitation probability"
        unit_of_measurement: "%"
        state: "{{ state_attr('weather.home','forecast')[0].precipitation_probability | round }}"
      
      - name: "Electricity Price"
        unit_of_measurement: "Øre"
        state: "{{ states('sensor.tibber') | multiply(100) | round }}"
      
      - name: "Electricity Price Level"
        state: "{{ state_attr('sensor.tibber','price_level') | capitalize | replace('_',' ') }}"
      
      - name: "First subway"
        icon: mdi:subway-variant
        unit_of_measurement: "min"
        state: "{{ states('sensor.entur_okern_platform_2') }}"
      
      - name: "Next subway"
        icon: mdi:subway-variant
        unit_of_measurement: "min"
        state: "{{ state_attr('sensor.entur_okern_platform_2','next_due_in') | replace('min','') }}"
      
      - name: Electricity price emoji
        state: >
          {% if state_attr('sensor.tibber','price_level') == "VERY_CHEAP" %}
            😄
          {% elif state_attr('sensor.tibber','price_level') == "CHEAP" %}
            🙂
          {% elif state_attr('sensor.tibber','price_level') == "NORMAL" %}
            😐
          {% elif state_attr('sensor.tibber','price_level') == "EXPENSIVE" %}
            😠
          {% elif state_attr('sensor.tibber','price_level') == "VERY_EXPENSIVE" %}
            🤬
          {% else %}
            ?
          {% endif %}

      - name: Electricity price in 12 hours
        unit_of_measurement: NOK
        state: >
          {% if now().hour <= 11  %}
          {{ (state_attr('sensor.nordpool_kwh_oslo_nok_3_10_025','today'))[now().hour + 12] }}
          {% else %}
          {{ (state_attr('sensor.nordpool_kwh_oslo_nok_3_10_025','tomorrow'))[now().hour - 12] }}
          {% endif %}
      
      - name: Low batteries
        icon: mdi:battery-10
        state: >
          {% set ns = namespace(below=[]) %}
          {% for s in states.sensor 
            if s.entity_id.endswith('battery_level') and s.state != 'unavailable' and s.state != 'unknown' and s.state|int < 5 %}
          {% set ns.below = ns.below + [s.entity_id] %}
          {% endfor %}
          {% if ns.below | count ==  0  %}
            none
          {% else %}
            {{ ns.below | join('\n') }}{% set ns = namespace(below=[]) %}
          {% endif %}
      
      # This section is stupid because sensor.techem won't be parsed well as json. Is probably solvable in jinja or graphql..
      - name: District Heating Usage
        unit_of_measurement: "kWh"
        state: "{{ (((states('sensor.techem') | from_json)[0]['value'])/7) | round(0) }}"
      - name: Distric Heating Usage Compared To Neighbors
        unit_of_measurement: "%"
        state: "{{ (states('sensor.techem') | from_json)[0]['comparePercent'] }}"
      - name: Hot Water Usage
        unit_of_measurement: "L"
        state: "{{ (((states('sensor.techem') | from_json)[1]['value'])/7*1000) | round(0) }}"
      - name: Hot Water Usage Compared To Neighbors
        unit_of_measurement: "%"
        state: "{{ (states('sensor.techem') | from_json)[1]['comparePercent'] }}"