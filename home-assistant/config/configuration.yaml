
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

discovery:
  ignore:
    - homekit

# Text to speech
tts:
  - platform: google_translate

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

recorder:
  purge_keep_days: 90
  commit_interval: 60

homeassistant:
  currency: NOK

wake_on_lan:

# https://github.com/custom-components/nordpool
nordpool:

sensor:
  - platform: miflora
    mac: "C4:7C:8D:6B:F5:92"
    name: "Buskhild"
  
  # https://github.com/custom-components/nordpool
  - platform: nordpool
    VAT: true
    currency: "EUR"
    region: Oslo
    precision: 3

  - platform: citybikes
    radius: 1000

  - platform: entur_public_transport
    show_on_map: true
    number_of_departures: 3
    stop_ids:
      - 'NSR:StopPlace:58194' # Økern T
      - 'NSR:StopPlace:5914'  # Økern aldershjem
    line_whitelist:
      - 'RUT:Line:5'
      - 'RUT:Line:60'
    
  - platform: command_line
    name: EUR/NOK conversion rate
    command: curl -s "https://data.norges-bank.no/api/data/EXR/B.EUR.NOK.SP?lastNObservations=1&format=sdmx-json" | python3 -c 'import sys, json;print(json.load(sys.stdin)["data"]["dataSets"][0]["series"]["0:0:0:0"]["observations"]["0"][0])'
    unit_of_measurement: "NOK"
    scan_interval: 3600
  
  - platform: command_line
    name: Techem data
    command: pwsh -f /config/pwsh/Techem.ps1
    scan_interval: 3600
    value_template: "{{ value_json }}"
    json_attributes:
      - DistrictHeating
      - HotWater
  
  - platform: integration
    source: sensor.electricitytruewattnow
    name: electricitywh
    method: left

template:
  - sensor:
      - name: "Electricity usage"
        unit_of_measurement: "kWh"
        state: "{{ states('sensor.electricitywh') | multiply(0.001) | round(3) }}"
        device_class: energy
        state_class: measurement
      
      - name: TV Volume
        unit_of_measurement: "%"
        state: "{{ state_attr('media_player.living_room_tv','volume_level') | multiply(100) | round }}"

      - name: "Precipitation probability"
        unit_of_measurement: "%"
        state: "{{ state_attr('weather.home','forecast')[0].precipitation_probability | round }}"
      
      - name: "Electricity Price"
        unit_of_measurement: "Øre"
        state: "{{ states('sensor.tibber') | multiply(100) | round }}"
      
      - name: "Electricity Price Level"
        state: "{{ state_attr('sensor.tibber','price_level') | capitalize | replace('_',' ') }}"
      
      - name: "First subway"
        icon: mdi:subway-variant
        unit_of_measurement: "min"
        state: "{{ states('sensor.entur_okern_platform_2') }}"
      
      - name: "Next subway"
        icon: mdi:subway-variant
        unit_of_measurement: "min"
        state: "{{ state_attr('sensor.entur_okern_platform_2','next_due_in') | replace('min','') }}"
      
      - name: Electricity price emoji
        state: >
          {% if state_attr('sensor.tibber','price_level') == "VERY_CHEAP" %}
            😄
          {% elif state_attr('sensor.tibber','price_level') == "CHEAP" %}
            🙂
          {% elif state_attr('sensor.tibber','price_level') == "NORMAL" %}
            😐
          {% elif state_attr('sensor.tibber','price_level') == "EXPENSIVE" %}
            😠
          {% elif state_attr('sensor.tibber','price_level') == "VERY_EXPENSIVE" %}
            🤬
          {% else %}
            ?
          {% endif %}
      
      - name: Electricity price in EUR in 10 hours
        unit_of_measurement: "EUR"
        state: >
          {% if now().hour < 14 %}
          {{ state_attr('sensor.nordpool_kwh_oslo_eur_3_10_025','today')[now().hour+10]}}
          {%- else -%}
          {{ state_attr('sensor.nordpool_kwh_oslo_eur_3_10_025','tomorrow')[now().hour-14]}}
          {%- endif %}
      
      - name: Electricity price in NOK(Øre) in 10 hours
        unit_of_measurement: "Øre"
        state: "{{ (states('sensor.electricitypriceeurin10hrs') | float * states('sensor.eur_nok_conversion_rate') | float * 100) | round }}" # Times 100 to get Øre.
      
      - name: "Laptop mouse battery"
        unit_of_measurement: "%"
        device_class: battery
        state: >
          {% set mousebatlist = states("sensor.t570_bat_hidpp_battery_0_charge"),
                                states("sensor.t570_bat_hidpp_battery_1_charge") %}
          {{ mousebatlist | max }}
      
      - name: District heating usage last 30 days
        unit_of_measurement: "kWh"
        device_class: energy
        state: "{{ state_attr('sensor.techem_data','DistrictHeating')['kWhLast30Days']}}"
      
      - name: District heating usage compared to neighbors
        unit_of_measurement: '%'
        state: "{{ state_attr('sensor.techem_data','DistrictHeating')['UsageComparedToNeighbors']}}"
      
      - name: Hot water usage last 30 days
        unit_of_measurement: "Liters"
        state: "{{ state_attr('sensor.techem_data','HotWater')['LitersLast30Days']}}"
      
      - name: Hot water usage compared to neighbors
        unit_of_measurement: '%'
        state: "{{ state_attr('sensor.techem_data','HotWater')['UsageComparedToNeighbors']}}"
      
      - name: Real watt usage now
        unit_of_measurement: "W"
        state: >
          {%if states('sensor.powermeterraw')[0] == "1" %}
          {{ states('sensor.powermeterraw').split(";")[1] | round }}
          {% endif %}
      
      - name: Apparent watt usage now
        unit_of_measurement: "W"
        state: >
          {%if states('sensor.powermeterraw')[0] == "1" %}
          {{ states('sensor.powermeterraw').split(";")[2] | round }}
          {% endif %}
