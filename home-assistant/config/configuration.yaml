
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

discovery:
  ignore:
    - homekit

# Text to speech
tts:
  - platform: google_translate

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

recorder:
  purge_keep_days: 30
  commit_interval: 60

wake_on_lan:

sensor:
  - platform: citybikes
    radius: 1000

  - platform: entur_public_transport
    show_on_map: true
    number_of_departures: 3
    stop_ids:
      - 'NSR:StopPlace:58194' # Økern T
      - 'NSR:StopPlace:5914'  # Økern aldershjem
    line_whitelist:
      - 'RUT:Line:5'
      - 'RUT:Line:60'
  
  - platform: integration
    source: sensor.real_watt_usage_now
    name: Electricity kWh
    unit_prefix: k
    round: 2

template:
  - sensor:      
      - name: TV Volume
        unit_of_measurement: "%"
        state: "{{ state_attr('media_player.living_room_tv','volume_level') | multiply(100) | round }}"

      - name: "Precipitation probability"
        unit_of_measurement: "%"
        state: "{{ state_attr('weather.home','forecast')[0].precipitation_probability | round }}"
      
      - name: "Electricity Price"
        unit_of_measurement: "Øre"
        state: "{{ states('sensor.tibber') | multiply(100) | round }}"
      
      - name: "Electricity Price Level"
        state: "{{ state_attr('sensor.tibber','price_level') | capitalize | replace('_',' ') }}"
      
      - name: "First subway"
        icon: mdi:subway-variant
        unit_of_measurement: "min"
        state: "{{ states('sensor.entur_okern_platform_2') }}"
      
      - name: "Next subway"
        icon: mdi:subway-variant
        unit_of_measurement: "min"
        state: "{{ state_attr('sensor.entur_okern_platform_2','next_due_in') | replace('min','') }}"
      
      - name: Electricity price emoji
        state: >
          {% if state_attr('sensor.tibber','price_level') == "VERY_CHEAP" %}
            😄
          {% elif state_attr('sensor.tibber','price_level') == "CHEAP" %}
            🙂
          {% elif state_attr('sensor.tibber','price_level') == "NORMAL" %}
            😐
          {% elif state_attr('sensor.tibber','price_level') == "EXPENSIVE" %}
            😠
          {% elif state_attr('sensor.tibber','price_level') == "VERY_EXPENSIVE" %}
            🤬
          {% else %}
            ?
          {% endif %}
      
      - name: Low batteries
        icon: mdi:battery-10
        state: >
          {% set ns = namespace(below=[]) %}
          {% for s in states.sensor 
            if s.entity_id.endswith('battery_level') and s.state != 'unavailable' and s.state != 'unknown' and s.state|int < 3 %}
          {% set ns.below = ns.below + [s.entity_id] %}
          {% endfor %}
          {% if ns.below | count ==  0  %}
            none
          {% else %}
            {{ ns.below | join('\n') }}{% set ns = namespace(below=[]) %}
          {% endif %}
