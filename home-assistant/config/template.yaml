- sensor:
    - name: Dishwasher tilt angle
      unit_of_measurement: 'degrees'
      state: "{{ state_attr('binary_sensor.vibration_51','tiltangle') }}"

    - name: Wind Speed
      unit_of_measurement: km/h
      state: "{{ state_attr('weather.home','wind_speed') | round }}"

    - name: Bird confidence
      unit_of_measurement: "%"
      state: "{{state_attr('image_processing.birds','summary').bird|default(0)}}"

    - name: TV Volume
      unit_of_measurement: "%"
      state: "{{ state_attr('media_player.living_room_tv','volume_level') | multiply(100) | round }}"

    - name: "Precipitation probability"
      unit_of_measurement: "%"
      state: "{{ state_attr('weather.home','forecast')[0].precipitation_probability | round }}"
    
    - name: "Electricity Price"
      unit_of_measurement: "Øre"
      state: "{{ states('sensor.tibber') | multiply(100) | round }}"
    
    - name: "Electricity Price Level"
      state: "{{ state_attr('sensor.tibber','price_level') | capitalize | replace('_',' ') }}"
    
    - name: "First subway"
      icon: mdi:subway-variant
      unit_of_measurement: "min"
      state: "{{ states('sensor.entur_okern_platform_2') }}"
    
    - name: "Next subway"
      icon: mdi:subway-variant
      unit_of_measurement: "min"
      state: "{{ state_attr('sensor.entur_okern_platform_2','next_due_in') | replace('min','') }}"
    
    - name: Electricity price emoji
      state: >
        {% if state_attr('sensor.tibber','price_level') == "VERY_CHEAP" %}
          😄
        {% elif state_attr('sensor.tibber','price_level') == "CHEAP" %}
          🙂
        {% elif state_attr('sensor.tibber','price_level') == "NORMAL" %}
          😐
        {% elif state_attr('sensor.tibber','price_level') == "EXPENSIVE" %}
          😠
        {% elif state_attr('sensor.tibber','price_level') == "VERY_EXPENSIVE" %}
          🤬
        {% else %}
          ?
        {% endif %}

    - name: Electricity price in 12 hours
      unit_of_measurement: NOK
      state: >
        {% if now().hour <= 11  %}
        {{ (state_attr('sensor.nordpool_kwh_oslo_nok_3_10_025','today'))[now().hour + 12] }}
        {% else %}
        {{ (state_attr('sensor.nordpool_kwh_oslo_nok_3_10_025','tomorrow'))[now().hour - 12] }}
        {% endif %}
    
    - name: Low batteries
      icon: mdi:battery-10
      state: >
        {% set ns = namespace(below=[]) %}
        {% for s in states.sensor 
          if s.entity_id.endswith('battery_level') and s.state != 'unavailable' and s.state != 'unknown' and s.state|int < 5 %}
        {% set ns.below = ns.below + [s.entity_id] %}
        {% endfor %}
        {% if ns.below | count ==  0  %}
          none
        {% else %}
          {{ ns.below | join('\n') }}{% set ns = namespace(below=[]) %}
        {% endif %}

    - name: Offline services
      icon: mdi:server-network-off
      state: >
        {% set ns = namespace(down=[]) %}
        {% for s in states.binary_sensor 
          if s.entity_id.startswith('binary_sensor.uptimekuma') and s.state == 'off' %}
        {% set ns.down = ns.down + [s.entity_id] %}
        {% endfor %}
        {% if ns.down | count ==  0  %}
          none
        {% else %}
          {{ ns.down | join('\n') }}{% set ns = namespace(down=[]) %}
        {% endif %}
    
    # This section is stupid because sensor.techem won't be parsed well as json. Is probably solvable in jinja or graphql..
    - name: District Heating Usage
      unit_of_measurement: "kWh"
      state: "{{ (((states('sensor.techem') | from_json)[0]['value'])/7) | round(0) }}"
    - name: Distric Heating Usage Compared To Neighbors
      unit_of_measurement: "%"
      state: "{{ (states('sensor.techem') | from_json)[0]['comparePercent'] }}"
    - name: Hot Water Usage
      unit_of_measurement: "L"
      state: "{{ (((states('sensor.techem') | from_json)[1]['value'])/7*1000) | round(0) }}"
    - name: Hot Water Usage Compared To Neighbors
      unit_of_measurement: "%"
      state: "{{ (states('sensor.techem') | from_json)[1]['comparePercent'] }}"